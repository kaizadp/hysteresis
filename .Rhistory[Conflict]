source("0-hysteresis_packages.R")
source("1-moisture_tracking.R")
source("3-picarro_data.R")
library(drake)
plan <- drake_plan(
# Metadata
core_key = read_core_key(file_in("data/Core_key.xlsx")) %>%
filter(is.na(skip)) %>%
dplyr::mutate(Moisture = dplyr::recode(Moisture,
"100.0"="100",
"75.0"="75",
"50.0"="50")) %>%
dplyr::mutate(Status = case_when(grepl("_D$", Core_assignment) ~ "Dry",
grepl("_W$", Core_assignment) ~ "Wet",
grepl("_fm$", Core_assignment) ~ "FM"),
moisture_lvl = if_else(soil_type=="Soil"&Moisture=="sat","140",
if_else(soil_type=="Soil_sand"&Moisture=="sat","100",
if_else(Moisture=="dry","5",
if_else(soil_type=="Soil_sand"&Moisture=="100","40",as.character((Moisture))))))) %>%
dplyr::mutate(moisture_lvl = factor(moisture_lvl, levels = c("140","100","75","50","40","5","fm"))),
core_dry_weights = read_core_dryweights(file_in("data/Core_weights.xlsx"), sheet = "initial"),
core_masses = read_core_masses(file_in("data/Core_weights.xlsx"),
sheet = "Mass_tracking", core_key, core_dry_weights),
valve_key = filter(core_masses, Seq.Program == "CPCRW_SFDec2018.seq"),
# Picarro data
# Using the 'trigger' argument below means we only re-read the Picarro raw
# data when necessary, i.e. when the files change
picarro_raw = target(process_directory("data/picarro_data/"),
trigger = trigger(change = list.files("data/picarro_data/", pattern = "dat$", recursive = TRUE))),
picarro_clean = clean_picarro_data(picarro_raw),
# Match Picarro data with the valve key data
pcm = match_picarro_data(picarro_clean, valve_key),
picarro_clean_matched = pcm$pd,
picarro_match_count = pcm$pmc,
valve_key_match_count = pcm$vkmc,
qc1 = qc_match(picarro_clean, picarro_clean_matched, valve_key, picarro_match_count, valve_key_match_count),
qc2 = qc_concentrations(picarro_clean_matched, valve_key),
ghg_fluxes = compute_ghg_fluxes(picarro_clean_matched, valve_key),
qc3 = qc_fluxes(ghg_fluxes, valve_key),
#summarizing
ghg_fluxes %>%
group_by(Core) %>%
dplyr::summarise(cum = sum(flux_co2_umol_g_s),
max = max(flux_co2_umol_g_s),
mean = mean(flux_co2_umol_g_s),
sd = sd(flux_co2_umol_g_s),
se = sd/sqrt(n()),
n = n()) %>%
left_join(core_key, by = "Core")-> cum_flux,
cum_flux %>%
group_by(soil_type,moisture_lvl,trt) %>%
dplyr::summarize(cum = mean(cum),
max = mean(max))->mean,
# preliminary plots
p_cum = ggplot(cum_flux, aes(x = moisture_lvl, y = cum*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = cum*1000))+
geom_vline(xintercept = 6.5)+
ylab("cum flux_co2_nmol_g_s")+
facet_grid(soil_type~.)+
ggtitle("cumulative CO2 flux"),
p_max = ggplot(cum_flux, aes(x = moisture_lvl, y = max*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = max*1000))+
geom_vline(xintercept = 6.5)+
ylab("maximum flux_co2_nmol_g_s")+
facet_grid(soil_type~.)+
ggtitle("maximum CO2 flux"),
p_num = ggplot(cum_flux, aes(x = Core, y = n))+
geom_point()+
ggtitle("no. of readings"),
p_cores = ggplot(gf, aes(DATETIME, flux_co2_umol_g_s*1000, color = Sand)) +
geom_point() + geom_line() +
ylab("flux_co2_nmol_g_s")+
facet_wrap(~Core, scale = "free_x")+
geom_hline(yintercept = 0)+
theme(legend.position="none"),
p_trt = ggplot(gf, aes(DATETIME, flux_co2_umol_g_s*1000, color = Core_assignment)) +
geom_point() + geom_line() +
ylab("flux_co2_nmol_g_s")+
facet_wrap(~Core_assignment, scale = "free_x")+
geom_hline(yintercept = 0)+
theme(legend.position="none"),
ggsave("outputs/fluxes_co2_cum.png", plot = p_cum, width = 8, height = 6),
ggsave("outputs/fluxes_co2_max.png", plot = p_max, width = 8, height = 6),
ggsave("outputs/fluxes_co2_count.png", plot = p_num, width = 8, height = 6),
ggsave("outputs/fluxes_co2_cores.png", plot = p_cores, width = 10, height = 10),
ggsave("outputs/fluxes_co2_trt.png", plot = p_trt, width = 15, height = 15)
)
message("Now type make(plan)")
make(plan)
source("0-hysteresis_packages.R")
source("1-moisture_tracking.R")
source("3-picarro_data.R")
core_key = read_core_key(file_in("data/Core_key.xlsx")) %>%
filter(is.na(skip)) %>%
dplyr::mutate(Moisture = dplyr::recode(Moisture,
"100.0"="100",
"75.0"="75",
"50.0"="50")) %>%
dplyr::mutate(Status = case_when(grepl("_D$", Core_assignment) ~ "Dry",
grepl("_W$", Core_assignment) ~ "Wet",
grepl("_fm$", Core_assignment) ~ "FM"),
moisture_lvl = if_else(soil_type=="Soil"&Moisture=="sat","140",
if_else(soil_type=="Soil_sand"&Moisture=="sat","100",
if_else(Moisture=="dry","5",
if_else(soil_type=="Soil_sand"&Moisture=="100","40",as.character((Moisture))))))) %>%
dplyr::mutate(moisture_lvl = factor(moisture_lvl, levels = c("140","100","75","50","40","5","fm")))
core_dry_weights = read_core_dryweights(file_in("data/Core_weights.xlsx"), sheet = "initial")
core_masses = read_core_masses(file_in("data/Core_weights.xlsx"),
sheet = "Mass_tracking", core_key, core_dry_weights)
valve_key = filter(core_masses, Seq.Program == "CPCRW_SFDec2018.seq")
plan <- drake_plan(
# Picarro data
# Using the 'trigger' argument below means we only re-read the Picarro raw
# data when necessary, i.e. when the files change
picarro_raw = target(process_directory("data/picarro_data/"),
trigger = trigger(change = list.files("data/picarro_data/", pattern = "dat$", recursive = TRUE))),
picarro_clean = clean_picarro_data(picarro_raw),
# Match Picarro data with the valve key data
pcm = match_picarro_data(picarro_clean, valve_key),
picarro_clean_matched = pcm$pd,
picarro_match_count = pcm$pmc,
valve_key_match_count = pcm$vkmc,
qc1 = qc_match(picarro_clean, picarro_clean_matched, valve_key, picarro_match_count, valve_key_match_count),
qc2 = qc_concentrations(picarro_clean_matched, valve_key),
qc3 = qc_fluxes(ghg_fluxes, valve_key))
picarro_clean_matched = readd(picarro_clean_matched)
make(plan)
plan <- drake_plan(
# Picarro data
# Using the 'trigger' argument below means we only re-read the Picarro raw
# data when necessary, i.e. when the files change
picarro_raw = target(process_directory("data/picarro_data/"),
trigger = trigger(change = list.files("data/picarro_data/", pattern = "dat$", recursive = TRUE))),
picarro_clean = clean_picarro_data(picarro_raw),
# Match Picarro data with the valve key data
pcm = match_picarro_data(picarro_clean, valve_key),
picarro_clean_matched = pcm$pd,
picarro_match_count = pcm$pmc,
valve_key_match_count = pcm$vkmc,
qc1 = qc_match(picarro_clean, picarro_clean_matched, valve_key, picarro_match_count, valve_key_match_count),
qc2 = qc_concentrations(picarro_clean_matched, valve_key))
make(plan)
picarro_clean_matched = readd(picarro_clean_matched)
ghg_fluxes = compute_ghg_fluxes(picarro_clean_matched, valve_key)
qc3 = qc_fluxes(ghg_fluxes, valve_key)
#summarizing
ghg_fluxes %>%
group_by(Core) %>%
dplyr::summarise(cum = sum(flux_co2_umol_g_s),
max = max(flux_co2_umol_g_s),
mean = mean(flux_co2_umol_g_s),
sd = sd(flux_co2_umol_g_s),
se = sd/sqrt(n()),
n = n()) %>%
left_join(core_key, by = "Core")-> cum_flux
cum_flux %>%
group_by(soil_type,moisture_lvl,trt) %>%
dplyr::summarize(cum = mean(cum),
max = mean(max))->mean
View(ghg_fluxes)
ghg_fluxes %>%
dplyr::mutate(flux_co2_umol_gC_s = flux_co2_umol_g_s / (TC/100))->ghg_fluxes
# compute fluxes per gram of C
TC = 8.34 # percent
ghg_fluxes %>%
dplyr::mutate(flux_co2_umol_gC_s = flux_co2_umol_g_s / (TC/100))->ghg_fluxes
#summarizing
ghg_fluxes %>%
group_by(Core) %>%
dplyr::summarise(cum = sum(flux_co2_umol_g_s),
max = max(flux_co2_umol_g_s),
cumC = sum(flux_co2_umol_gC_s),
maxC = max(flux_co2_umol_gC_s),
mean = mean(flux_co2_umol_g_s),
sd = sd(flux_co2_umol_g_s),
se = sd/sqrt(n()),
n = n()) %>%
left_join(core_key, by = "Core")-> cum_flux
cum_flux %>%
group_by(soil_type,moisture_lvl,trt) %>%
dplyr::summarize(cum = mean(cum),
max = mean(max),
cumC = mean(cumC),
maxC = mean(maxC))->mean
p_cum = ggplot(cum_flux, aes(x = moisture_lvl, y = cum*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = cum*1000))+
geom_vline(xintercept = 6.5)+
ylab("cum flux_co2_nmol_g_s")+
facet_grid(soil_type~.)+
ggtitle("cumulative CO2 flux")
p_cum
p_cumC = ggplot(cum_flux, aes(x = moisture_lvl, y = cumC*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = cumC*1000))+
geom_vline(xintercept = 6.5)+
ylab("cum flux_co2_nmol_gC_s")+
facet_grid(soil_type~.)+
ggtitle("cumulative CO2 flux per g C")
p_cumC
read_core_dryweights <- function(filename, sheet) {
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g) %>%
dplyr::mutate(drysoil = Soil_g/(0.7123+1),
carbon_g = drysoil*(TC/100))
}
dry <- read_core_dryweights("data/Core_weights.xlsx", sheet = "initial")
View(dry)
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g) %>%
dplyr::mutate(drysoil = Soil_g/(0.7123+1),
carbon_g = round(drysoil*(TC/100),2))
read_core_dryweights <- function(filename, sheet) {
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g) %>%
dplyr::mutate(drysoil = Soil_g/(0.7123+1),
carbon_g = round(drysoil*(TC/100),2))
}
dry <- read_core_dryweights("data/Core_weights.xlsx", sheet = "initial")
read_core_dryweights <- function(filename, sheet) {
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g) %>%
dplyr::mutate(drysoil = Soil_g/(0.7123+1),
carbon_g = round(drysoil*(TC/100),2)) %>%
dplyr::select(-drysoil)
}
dry <- read_core_dryweights("data/Core_weights.xlsx", sheet = "initial")
read_core_masses <- function(filename, sheet, core_key, core_dry_weights) {
readxl::read_excel(filename, sheet = sheet) %>%
filter(!is.na(Site), Site != "AMB", Core != "0") %>% # remove unnecessary crap
left_join(core_key, by = "Core") %>%
left_join(core_dry_weights, by = "Core") %>%
filter(is.na(skip)) %>% # exclude the rows as needed
dplyr::select(Core, Start_datetime, Stop_datetime, Seq.Program, Valve,
Core_assignment, EmptyWt_g, DryWt_g, Mass_g, Moisture) %>%
dplyr::mutate(Start_datetime = mdy_hm(Start_datetime, tz = "America/Los_Angeles"),
Stop_datetime = mdy_hm(Stop_datetime, tz = "America/Los_Angeles"),
# calculate moisture content for each core
DryWt_g = round(DryWt_g,2),
MoistWt_g = Mass_g - EmptyWt_g,
Water_g = MoistWt_g - DryWt_g,
Moisture_perc = round(((Water_g / DryWt_g) * 100), 2))
}
mass <- read_core_masses("data/Core_weights.xlsx", sheet = "Mass_tracking", ca, dry)
View(mass)
read_core_masses <- function(filename, sheet, core_key, core_dry_weights) {
readxl::read_excel(filename, sheet = sheet) %>%
filter(!is.na(Site), Site != "AMB", Core != "0") %>% # remove unnecessary crap
left_join(core_key, by = "Core") %>%
left_join(core_dry_weights, by = "Core") %>%
filter(is.na(skip)) %>% # exclude the rows as needed
dplyr::select(Core, Start_datetime, Stop_datetime, Seq.Program, Valve,
Core_assignment, EmptyWt_g, DryWt_g, Mass_g, carbon_g, Moisture) %>%
dplyr::mutate(Start_datetime = mdy_hm(Start_datetime, tz = "America/Los_Angeles"),
Stop_datetime = mdy_hm(Stop_datetime, tz = "America/Los_Angeles"),
# calculate moisture content for each core
DryWt_g = round(DryWt_g,2),
MoistWt_g = Mass_g - EmptyWt_g,
Water_g = MoistWt_g - DryWt_g,
Moisture_perc = round(((Water_g / DryWt_g) * 100), 2))
}
mass <- read_core_masses("data/Core_weights.xlsx", sheet = "Mass_tracking", ca, dry)
View(valve_key)
source("0-hysteresis_packages.R")
source("1-moisture_tracking.R")
source("3-picarro_data.R")
core_key = read_core_key(file_in("data/Core_key.xlsx")) %>%
filter(is.na(skip)) %>%
dplyr::mutate(Moisture = dplyr::recode(Moisture,
"100.0"="100",
"75.0"="75",
"50.0"="50")) %>%
dplyr::mutate(Status = case_when(grepl("_D$", Core_assignment) ~ "Dry",
grepl("_W$", Core_assignment) ~ "Wet",
grepl("_fm$", Core_assignment) ~ "FM"),
moisture_lvl = if_else(soil_type=="Soil"&Moisture=="sat","140",
if_else(soil_type=="Soil_sand"&Moisture=="sat","100",
if_else(Moisture=="dry","5",
if_else(soil_type=="Soil_sand"&Moisture=="100","40",as.character((Moisture))))))) %>%
dplyr::mutate(moisture_lvl = factor(moisture_lvl, levels = c("140","100","75","50","40","5","fm")))
core_dry_weights = read_core_dryweights(file_in("data/Core_weights.xlsx"), sheet = "initial")
core_masses = read_core_masses(file_in("data/Core_weights.xlsx"),
sheet = "Mass_tracking", core_key, core_dry_weights)
valve_key = filter(core_masses, Seq.Program == "CPCRW_SFDec2018.seq")
plan <- drake_plan(
# Picarro data
# Using the 'trigger' argument below means we only re-read the Picarro raw
# data when necessary, i.e. when the files change
picarro_raw = target(process_directory("data/picarro_data/"),
trigger = trigger(change = list.files("data/picarro_data/", pattern = "dat$", recursive = TRUE))),
picarro_clean = clean_picarro_data(picarro_raw),
# Match Picarro data with the valve key data
pcm = match_picarro_data(picarro_clean, valve_key),
picarro_clean_matched = pcm$pd,
picarro_match_count = pcm$pmc,
valve_key_match_count = pcm$vkmc,
qc1 = qc_match(picarro_clean, picarro_clean_matched, valve_key, picarro_match_count, valve_key_match_count),
qc2 = qc_concentrations(picarro_clean_matched, valve_key))
make(plan)
picarro_clean_matched = readd(picarro_clean_matched)
ghg_fluxes = compute_ghg_fluxes(picarro_clean_matched, valve_key)
plan <- drake_plan(
# Metadata
core_key = read_core_key(file_in("data/Core_key.xlsx")) %>%
filter(is.na(skip)) %>%
dplyr::mutate(Moisture = dplyr::recode(Moisture,
"100.0"="100",
"75.0"="75",
"50.0"="50")) %>%
dplyr::mutate(Status = case_when(grepl("_D$", Core_assignment) ~ "Dry",
grepl("_W$", Core_assignment) ~ "Wet",
grepl("_fm$", Core_assignment) ~ "FM"),
moisture_lvl = if_else(soil_type=="Soil"&Moisture=="sat","140",
if_else(soil_type=="Soil_sand"&Moisture=="sat","100",
if_else(Moisture=="dry","5",
if_else(soil_type=="Soil_sand"&Moisture=="100","40",as.character((Moisture))))))) %>%
dplyr::mutate(moisture_lvl = factor(moisture_lvl, levels = c("140","100","75","50","40","5","fm"))),
core_dry_weights = read_core_dryweights(file_in("data/Core_weights.xlsx"), sheet = "initial"),
core_masses = read_core_masses(file_in("data/Core_weights.xlsx"),
sheet = "Mass_tracking", core_key, core_dry_weights),
valve_key = filter(core_masses, Seq.Program == "CPCRW_SFDec2018.seq"),
# Picarro data
# Using the 'trigger' argument below means we only re-read the Picarro raw
# data when necessary, i.e. when the files change
picarro_raw = target(process_directory("data/picarro_data/"),
trigger = trigger(change = list.files("data/picarro_data/", pattern = "dat$", recursive = TRUE))),
picarro_clean = clean_picarro_data(picarro_raw),
# Match Picarro data with the valve key data
pcm = match_picarro_data(picarro_clean, valve_key),
picarro_clean_matched = pcm$pd,
picarro_match_count = pcm$pmc,
valve_key_match_count = pcm$vkmc,
qc1 = qc_match(picarro_clean, picarro_clean_matched, valve_key, picarro_match_count, valve_key_match_count),
qc2 = qc_concentrations(picarro_clean_matched, valve_key),
ghg_fluxes = compute_ghg_fluxes(picarro_clean_matched, valve_key),
qc3 = qc_fluxes(ghg_fluxes, valve_key),
#summarizing
ghg_fluxes %>%
group_by(Core) %>%
dplyr::summarise(cum = sum(flux_co2_umol_g_s),
max = max(flux_co2_umol_g_s),
mean = mean(flux_co2_umol_g_s),
sd = sd(flux_co2_umol_g_s),
se = sd/sqrt(n()),
n = n()) %>%
left_join(core_key, by = "Core")-> cum_flux,
cum_flux %>%
group_by(soil_type,moisture_lvl,trt) %>%
dplyr::summarize(cum = mean(cum),
max = mean(max))->mean,
# preliminary plots
p_cum = ggplot(cum_flux, aes(x = moisture_lvl, y = cum*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = cum*1000))+
geom_vline(xintercept = 6.5)+
ylab("cum flux_co2_nmol_g_s")+
facet_grid(soil_type~.)+
ggtitle("cumulative CO2 flux"),
p_max = ggplot(cum_flux, aes(x = moisture_lvl, y = max*1000, color = trt))+
geom_point(position = position_dodge(width = 0.5))+
geom_smooth(data = mean, aes(x = as.numeric(moisture_lvl), y = max*1000))+
geom_vline(xintercept = 6.5)+
ylab("maximum flux_co2_nmol_g_s")+
facet_grid(soil_type~.)+
ggtitle("maximum CO2 flux"),
p_num = ggplot(cum_flux, aes(x = Core, y = n))+
geom_point()+
ggtitle("no. of readings"),
p_cores = ggplot(gf, aes(DATETIME, flux_co2_umol_g_s*1000, color = Sand)) +
geom_point() + geom_line() +
ylab("flux_co2_nmol_g_s")+
facet_wrap(~Core, scale = "free_x")+
geom_hline(yintercept = 0)+
theme(legend.position="none"),
p_trt = ggplot(gf, aes(DATETIME, flux_co2_umol_g_s*1000, color = Core_assignment)) +
geom_point() + geom_line() +
ylab("flux_co2_nmol_g_s")+
facet_wrap(~Core_assignment, scale = "free_x")+
geom_hline(yintercept = 0)+
theme(legend.position="none"),
ggsave("outputs/fluxes_co2_cum.png", plot = p_cum, width = 8, height = 6),
ggsave("outputs/fluxes_co2_max.png", plot = p_max, width = 8, height = 6),
ggsave("outputs/fluxes_co2_count.png", plot = p_num, width = 8, height = 6),
ggsave("outputs/fluxes_co2_cores.png", plot = p_cores, width = 10, height = 10),
ggsave("outputs/fluxes_co2_trt.png", plot = p_trt, width = 15, height = 15)
)
core_dry_weights = read_core_dryweights(file_in("data/Core_weights.xlsx"), sheet = "initial")
View(core_dry_weights)
core_masses = read_core_masses(file_in("data/Core_weights.xlsx"),
sheet = "Mass_tracking", core_key, core_dry_weights)
View(core_masses)
View(core_key)
source("0-hysteresis_packages.R")
source("1-moisture_tracking.R")
source("0-hysteresis_packages.R")
source("1-moisture_tracking.R")
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g, Carbon_g)
read_core_dryweights <- function(filename, sheet) {
read_excel(filename, sheet = sheet) %>%
dplyr::select(Core, EmptyWt_g, DryWt_g, Soil_g, Carbon_g)
}
dry <- read_core_dryweights("data/Core_weights.xlsx", sheet = "initial")
